// src/commands/economia/buy.js
const { EmbedBuilder } = require('discord.js');
const { addItemToInventory } = require('../../utils/inventoryHelper'); // Supondo que esta fun√ß√£o existe e funciona
const mongoose = require('mongoose'); // Necess√°rio se voc√™ for verificar ObjectId

module.exports = {
    name: 'buy',
    aliases: ['comprar'],
    description: 'Compra um item da loja.',
    category: 'economia',
    args: true, // Indica que o comando espera argumentos
    usage: '<nome do item completo ou ID> [quantidade]',
    async execute({ client, message, args }) {
        const User = client.models.User; // Seu modelo de usu√°rio
        const Item = client.models.Item; // Seu modelo de item

        let itemNameOrId;
        let quantity = 1; // Quantidade padr√£o √© 1

        if (args.length === 0) {
            return message.reply(`Por favor, especifique o item que deseja comprar. Uso: \`${process.env.PREFIX || '!'}buy ${this.usage}\``);
        }

        const lastArgument = args[args.length - 1];
        const potentialQuantity = parseInt(lastArgument);

        if (args.length > 1 && !isNaN(potentialQuantity) && potentialQuantity > 0) {
            quantity = potentialQuantity;
            itemNameOrId = args.slice(0, -1).join(' ');
        } else {
            itemNameOrId = args.join(' ');
        }

        if (args.length > 1 && !isNaN(potentialQuantity) && potentialQuantity <= 0) {
            return message.reply('A quantidade deve ser um n√∫mero positivo maior que zero.');
        }

        let itemQuery;
        if (mongoose.Types.ObjectId.isValid(itemNameOrId)) {
            itemQuery = { _id: itemNameOrId };
        } else {
            itemQuery = { name: new RegExp(`^${itemNameOrId.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}$`, 'i') };
        }
        
        const itemToBuy = await Item.findOne(itemQuery);
        
        if (!itemToBuy) {
            return message.reply(`üò• Desculpe, n√£o consegui encontrar o item "${itemNameOrId}" na loja. Verifique o nome ou ID e tente novamente. Use \`${process.env.PREFIX || '!'}shop\` para ver os itens dispon√≠veis.`);
        }

        if (!itemToBuy.buyPrice || itemToBuy.buyPrice <= 0) {
            return message.reply(`üòï O item "${itemToBuy.name}" n√£o est√° dispon√≠vel para compra no momento.`);
        }

        // IMPORTANTE: Certifique-se que User.findOrCreate usa 'message.author.id' para o campo 'discordId'
        // e 'message.author.tag' (ou message.author.username) para o campo 'username' no seu banco de dados.
        const userProfile = await User.findOrCreate(message.author.id, message.author.tag); 
        
        if (!userProfile) { // Adicionando uma verifica√ß√£o caso findOrCreate retorne nulo por algum erro interno
            console.error(`Falha ao encontrar ou criar perfil para ${message.author.tag} (ID: ${message.author.id})`);
            return message.reply('‚ö†Ô∏è Ocorreu um erro ao acessar seu perfil de economia. Tente novamente.');
        }

        const totalCost = itemToBuy.buyPrice * quantity;

        if (userProfile.balance < totalCost) {
            return message.reply(`Saldo insuficiente! Voc√™ tem ü™ô ${userProfile.balance.toLocaleString('pt-BR')} e precisa de ü™ô ${totalCost.toLocaleString('pt-BR')} para comprar ${quantity}x "${itemToBuy.name}".`);
        }

        userProfile.balance -= totalCost;
        try {
            await addItemToInventory(userProfile, itemToBuy._id.toString(), quantity, itemToBuy.name); 
            await userProfile.save();
        } catch (inventoryError) {
            console.error("Erro ao adicionar item ao invent√°rio ou salvar perfil:", inventoryError);
            userProfile.balance += totalCost; 
            try { await userProfile.save(); } catch (revertError) { console.error("Erro cr√≠tico ao reverter saldo:", revertError); }
            return message.reply('‚ö†Ô∏è Ocorreu um erro ao tentar adicionar o item ao seu invent√°rio. A transa√ß√£o foi cancelada. Tente novamente mais tarde.');
        }
        
        const embed = new EmbedBuilder()
            .setColor('#FF69B4')
            .setTitle('üõí Compra Realizada com Sucesso!')
            .setDescription(`${message.author.toString()}, sua transa√ß√£o foi conclu√≠da e o(s) item(ns) adicionado(s) ao seu invent√°rio.`)
            .addFields(
                { name: 'üõçÔ∏è Item Comprado', value: `${itemToBuy.name} (x${quantity})` },
                { name: 'üí∏ Custo Total', value: `ü™ô ${totalCost.toLocaleString('pt-BR')} moedas` },
                { name: 'üí∞ Saldo Restante', value: `ü™ô ${userProfile.balance.toLocaleString('pt-BR')} moedas` },
                { name: 'üí° Dica', value: `Use \`${process.env.PREFIX || '!'}inventory\` para ver seus itens.` }
            )
            .setThumbnail(itemToBuy.imageUrl || client.user.displayAvatarURL())
            .setTimestamp()
            .setFooter({ text: `Solicitado por: ${message.author.tag} | ${client.user.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) });
            
        message.channel.send({ embeds: [embed] });
    }
};