// src/commands/economia/sell.js
const { EmbedBuilder } = require('discord.js');
const { removeItemFromInventory } = require('../../utils/inventoryHelper'); // Certifique-se que o caminho est√° correto
const mongoose = require('mongoose'); // Para ObjectId.isValid

module.exports = {
    name: 'sell',
    aliases: ['vender'],
    description: 'Vende um item do seu invent√°rio.',
    category: 'economia',
    args: true, // Indica que o comando espera argumentos
    usage: '<nome do item completo ou ID do item no invent√°rio> [quantidade]',
    async execute({ client, message, args }) { 
        const User = client.models.User;
        // const Item = client.models.Item; // N√£o √© estritamente necess√°rio aqui se o itemDetails √© obtido do invent√°rio populado

        // 1. DECLARA√á√ÉO E INICIALIZA√á√ÉO DAS VARI√ÅVEIS
        let quantityToSell = 1; // Valor padr√£o se nenhuma quantidade for especificada
        let itemNameOrId;

        // 2. PARSE DOS ARGUMENTOS para itemNameOrId e quantityToSell
        if (args.length === 0) {
            // Se o handler de comandos n√£o previne isso, tratar aqui.
            // Com args: true, o handler de eventos (messageCreate.js) j√° deve retornar se n√£o houver args.
            // Mas por seguran√ßa:
            return message.reply(`Uso correto: \`${process.env.PREFIX}${this.name} ${this.usage}\``);
        }

        const lastArg = args[args.length - 1];
        const potentialQuantity = parseInt(lastArg);

        // Se houver mais de um argumento E o √∫ltimo for um n√∫mero positivo, ele √© a quantidade
        if (args.length > 1 && !isNaN(potentialQuantity) && potentialQuantity > 0) {
            quantityToSell = potentialQuantity;
            itemNameOrId = args.slice(0, -1).join(' '); // Todos os argumentos exceto o √∫ltimo
        } else {
            // Caso contr√°rio, todos os argumentos formam o nome/ID do item e a quantidade √© 1
            itemNameOrId = args.join(' ');
        }

        // 3. VALIDA√á√ÉO DA QUANTIDADE (Linha onde o erro provavelmente ocorreu se a declara√ß√£o acima falhou)
        // Esta checagem agora √© um pouco redundante se a l√≥gica acima j√° garante > 0,
        // mas mantemos como uma dupla verifica√ß√£o.
        if (quantityToSell <= 0) {
            return message.reply('A quantidade para vender deve ser um n√∫mero positivo maior que zero.');
        }

        // 4. L√ìGICA DO COMANDO
        const userProfile = await User.findOne({ discordId: message.author.id })
            .populate({
                path: 'inventory.itemId', // Popula os detalhes do item para cada entrada no invent√°rio
                model: 'Item'
            });

        if (!userProfile || !userProfile.inventory || userProfile.inventory.length === 0) {
            const embedEmptyInv = new EmbedBuilder()
                .setColor('#FF69B4') // Rosa
                .setTitle('üéí Invent√°rio Vazio')
                .setDescription('Voc√™ n√£o tem itens no seu invent√°rio para vender.')
                .setTimestamp()
                .setFooter({ text: `Solicitado por: ${message.author.tag} | ${client.user.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) });
            return message.channel.send({ embeds: [embedEmptyInv] });
        }
        
        const inventoryEntry = userProfile.inventory.find(entry =>
            entry.itemId && ( // Garante que o itemId (item populado) existe
                (entry.itemId.name.toLowerCase() === itemNameOrId.toLowerCase()) ||
                (entry.itemId._id.toString() === itemNameOrId) // Compara com o ID do Item Schema
            )
        );

        if (!inventoryEntry) {
            return message.reply(`Voc√™ n√£o possui o item "${itemNameOrId}" no seu invent√°rio, ou o nome/ID est√° incorreto.`);
        }

        const itemDetails = inventoryEntry.itemId; // Detalhes do item j√° populados

        if (itemDetails.sellPrice === undefined || itemDetails.sellPrice <= 0) {
            return message.reply(`O item "${itemDetails.name}" n√£o pode ser vendido ou n√£o tem um pre√ßo de venda definido.`);
        }
        
        if (inventoryEntry.quantity < quantityToSell) {
            return message.reply(`Voc√™ n√£o tem ${quantityToSell}x "${itemDetails.name}" para vender. Voc√™ possui apenas ${inventoryEntry.quantity}x.`);
        }

        const earnings = itemDetails.sellPrice * quantityToSell;
        // O helper removeItemFromInventory deve atualizar o userProfile.inventory diretamente
        // e retornar true/false. O userProfile.save() ser√° chamado depois.
        const successfullyRemoved = await removeItemFromInventory(userProfile, itemDetails._id, quantityToSell); 
        
        if (!successfullyRemoved) {
             // Isso pode acontecer se, por alguma concorr√™ncia ou erro l√≥gico, o item n√£o puder ser removido
             return message.reply('Ocorreu um erro ao tentar remover o item do seu invent√°rio. Verifique se voc√™ ainda possui a quantidade informada.');
        }
        
        userProfile.balance += earnings;
        
        try {
            await userProfile.save(); // Salva todas as altera√ß√µes (invent√°rio e saldo)

            const embed = new EmbedBuilder()
                .setColor('#FF69B4') // Rosa
                .setTitle('üí∏ Venda Realizada com Sucesso!')
                .setDescription(`${message.author.toString()}, voc√™ vendeu seus itens e recebeu moedas!`)
                .addFields(
                    { name: 'üì¶ Item Vendido', value: `${itemDetails.name} (x${quantityToSell})` },
                    { name: 'üí∞ Valor Recebido', value: `ü™ô ${earnings.toLocaleString()} moedas` },
                    { name: 'üí≥ Novo Saldo', value: `ü™ô ${userProfile.balance.toLocaleString()} moedas` },
                    { name: 'üí° Dica', value: `Use \`${process.env.PREFIX}inventory\` para ver os itens restantes.` }
                )
                .setThumbnail(itemDetails.imageUrl || message.author.displayAvatarURL({ dynamic: true }))
                .setTimestamp()
                .setFooter({ text: `Solicitado por: ${message.author.tag} | ${client.user.username}`, iconURL: message.author.displayAvatarURL({ dynamic: true }) });
            message.channel.send({ embeds: [embed] });
        } catch (error) {
            console.error("Erro ao salvar perfil ap√≥s venda:", error);
            // Considerar reverter a l√≥gica de remo√ß√£o do invent√°rio se o save falhar (complexo)
            // ou pelo menos n√£o adicionar o balance. Por simplicidade, apenas logamos.
            message.reply("Ocorreu um erro ao finalizar a venda. Tente novamente.");
        }
    }
};